name: NovaSheets
scopeName: source.css.novasheets
fileTypes:
  - '.nvss'

patterns:
  - include: '#all'

repository:
  all:
    patterns:
      - include: '#novasheets'
      - include: '#css'
      - include: '#chars'

  novasheets:
    patterns:
      - include: '#declarations'
      - include: '#substitutions'
      - include: '#objects'
      - include: '#comments'
      - include: '#loop-identifier'

  css:
    patterns:
      - include: '#selectors'
      - include: '#attributes'
      - include: '#at-rules'
      - include: '#functions'

  declarations:
    patterns:
      # Variable declaration
      - name: meta.function.novasheets
        begin: '(@var)[ \t]+([^=|]+)'
        beginCaptures:
          1: { name: keyword.control.declaration.function.novasheets }
          2: { name: variable.other.constant.novasheets }
        end: '=|$'
        endCaptures:
          0: { name: constant.character.variable.declaration.end.novasheets }
        patterns:
          - name: comment.label.parameter.novasheets
            match: '(\|)[ \t]*([^=|]+)'

      # Variable ending
      - name: keyword.control.variable.ending.novasheets
        match: '@endvar'

      # Parser constant
      - name: meta.preprocessor.novasheets
        match: '(@option)[ \t]+([A-Z_]+)[ \t]'
        captures:
          1: { name: keyword.control.declaration.option.novasheets }
          2: { name: variable.parameter.option.novasheets }

  substitutions:
    patterns:
      # Variables
      - name: meta.function-call.novasheets
        begin: '(\$\()\s*(?:(@[^=|)]+)|([^=|)]+))'
        beginCaptures:
          1: { name: constant.character.variable.begin.novasheets }
          2: { name: support.type.function.builtin.novasheets }
          3: { name: variable.other.constant.novasheets }
        end: '\)'
        endCaptures:
          0: { name: constant.character.variable.end.novasheets }
        patterns:
          - include: '#all'

      # Arguments
      - name: meta.function-call.parameter.novasheets
        match: '(\|)(?:\s*([^=|]+)\s*(=))?'
        captures:
          1: { name: constant.character.separator.parameter.novasheets }
          2: { name: variable.parameter.novasheets }
          3: { name: constant.character.accessor.parameter.novasheets }
        patterns:
          - name: variable.parameter.novasheets
            match: '[^=|]+'

      # Parameters
      - name: meta.block.parameter.novasheets
        begin: '\$\['
        end: '\]'
        captures:
          0: { name: constant.character.parameter.novasheets }
        patterns:
          - name: variable.parameter.novasheets
            begin: '(?<=\[)'
            end: '(?=\]|(\|))'
            endCaptures:
              0: { name: punctuation.separator.parameter.novasheets }

  objects:
    patterns:
      # Block substitutions
      - name: meta.block.substitution.novasheets
        begin: '\$<'
        end: '>'
        captures:
          0: { name: constant.character.substitution.novasheets }
        patterns:
          - name: entity.name.tag.css.substitution.novasheets
            match: '[^>]+'

      # Attribute retrieval
      - name: meta.block.attribute.novasheets
        begin: '<'
        end: '>'
        captures:
          0: { name: constant.character.substitution.novasheets }
        patterns:
          - name: entity.other.attribute-name.novasheets
            match: '[^>]+'

  loop-identifier:
    patterns:
      - name: constant.character.identifier.loop.novasheets
        begin: '\$v(\[)'
        end: '\]'
        captures:
          0: { name: punctuation.definition.identifier.novasheets }
      - name: constant.character.identifier.loop.novasheets
        match: '\$i|\$v'

  comments:
    patterns:
      # Inline comment
      - name: comment.line.double-slash.novasheets
        begin: '(?<![a-z]:)//'
        end: '$'

      # Block comment
      - name: comment.block.css
        begin: '/\*(?![\[/])'
        end: '(?<![/\]])\*/'
        captures:
          0: { name: comment.block.novasheets }

      # Static comment
      - contentName: meta.block.comment.static.novasheets
        begin: '/\*/'
        end: '/\*/'
        captures:
          0: { name: comment.block.parser.novasheets }

      # Parsed comment
      - name: comment.block.parser.novasheets
        match: '/\*\[|\]\*/'

  selectors:
    patterns:
      # Escapes
      - include: '#escapes'
      # Element
      - name: entity.name.tag.css.selector.element.css
        match: '(?x)
          \b
          (a|abbr|address|area|article|aside|audio|b|base|bdi|bdo|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|data|datalist|dd|del|details|dfn|dialog|div|dl|dt|em|embed|fieldset|figure|footer|form|h1|h2|h3|h4|h5|h6|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|main|map|mark|menu|menuitem|meta|meter|nav|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rb|rp|rt|rtc|ruby|s|samp|script|section|select|small|source|span|strong|style|sub|summary|sup|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|u|ul|var|video|wbr)
          \b
          '
      # Class
      - name: entity.name.tag.css.selector.class.css
        begin: '\.'
        end: '(?=[\s\[,.\#:+~>])'
        beginCaptures:
          0: { name: punctuation.accessor.selector.class.css }
      # ID
      - name: entity.name.tag.css.selector.id.css
        begin: '#'
        end: '(?=[\s\[,.\#:+~>])'
        beginCaptures:
          0: { name: punctuation.accessor.selector.id.css }
      # Pseudo-element/class
      - name: entity.name.tag.css.selector.pseudo.css
        begin: '::?'
        end: '(?=[\s\[,.\#:+~>])'
        beginCaptures:
          0: { name: punctuation.accessor.selector.pseudo.css }
      # Attributes
      - name: entity.name.tag.css.selector.attribute.css
        begin: '\['
        end: '\]'
        captures:
          0: { name: punctuation.accessor.selector.attribute.css }
      # Function
      - name: entity.name.tag.css.selector.function.css
        begin: '\('
        end: '\)'
        captures:
          0: { name: punctuation.accessor.selector.function.css }
      # Wildcard
      - name: constant.character.selector.wildcard.css
        match: '\*'
      # Comma
      - name: punctuation.selector.comma.css
        match: ','
      # At-rule
      - include: '#at-rules'
      # Breakpoint
      - name: keyword.control.breakpoint.novasheets
        match: '@(?!a-z)|\.{2,}'
      # Parent selector
      - name: meta.selector.parent.novasheets
        match: '(&)([\w-]+)?'
        captures:
          1: { name: constant.character.selector.parent.novasheets }
          2: { name: entity.name.tag.css.selector.fragmented.css }

  attributes:
    patterns:
      - name: entity.other.attribute-name.css
        match: '([a-z-]+)(:)'
        captures:
          2: { name: punctuation.terminator.attribute.name.end.css }

  at-rules:
    patterns:
      - name: keyword.control.function.at-rule.css
        match: '@[a-z-]+'

  functions:
    patterns:
      - name: meta.function-call.css
        begin: '([\w-]+)(?=(\())'
        beginCaptures:
          1: { name: entity.name.function.css }
          2: { name: punctuation.definition.function.end.css }
        end: '\)'
        endCaptures:
          0: { name: punctuation.definition.function.end.css }
        patterns:
          - include: '#novasheets'
          - include: '#chars'

  chars:
    patterns:
      # Strings
      - name: string.quoted.css
        begin: '(?<!\\)("|'')'
        end: '(?<!\\)\1'
        captures:
          0: { name: punctuation.definition.string.css }
        patterns:
          - include: '#escapes'

      # Numbers
      - name: constant.numeric.css
        match: '[+-]?[0-9]+(?:\.[0-9]+)?'

      # Regexes
      - name: string.regexp.novasheets
        match: '(?x)
          (?<!\\) # Skip escaped slashes
          /
          .+
          (?<!\\) # Skip escaped slashes
          /
          [gimusy]* # Regex flag
          (?=\s|\b)
          '

      # Units
      - name: constant.numeric.unit.css
        match: '(?<=[\d.])(%|em|rem|en|ex|vw|vh|px|pt|pc|cm|mm|m|ft|in|s|ms|deg)(?!\w)'

      # Important
      - name: storage.modifier.important.css
        match: '!\s*important'

      # Math operations
      - name: keyword.operator.math.novasheets
        match: '(?x)
          (?<=[.\d]) # Preceeded by number
          \s*[-+*/^e]\s* # Math operation
          (?=[-.\d]) # Followed by number
          '

      # Boolean operations
      - name: keyword.operator.boolean.novasheets
        match: '!|[|][|]|&&|\bn?and\b|\bx?n?or\b'
      - name: constant.language.boolean.novasheets
        match: 'true|false'

      # Colors
      - name: string.other.color.css
        match: '#[A-Fa-f0-9]{3,8}'

  escapes:
    patterns:
      - name: constant.character.escape.css
        match: '\\([\da-f]+\s?|.)'
